# user root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    #resolver 114.114.114.114 115.115.115.115 valid=300s;
    resolver 8.8.8.8 valid=300s;
    resolver_timeout 5s;
    lua_shared_dict my_cache 10m; # Shared memory dictionary for temporary storing response body
    include       mime.types;
    default_type  application/octet-stream;
    lua_package_path '/app/openresty/lualib/?.lua;;';
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    server {
        listen       {{ PORT }};
        server_name  _;
        location / {
            rewrite_by_lua_block {
                local signer = require "http_sig.sign_response"
                signer.set_cache_key_in_req_header()
            }
            # Lua header filter for setting the custom signature header
            header_filter_by_lua_block {
                local signer = require "http_sig.sign_response"
                signer:add_signature(ngx.shared.my_cache)
            }
            proxy_pass http://127.0.0.1:8013/;
        }
    }

    server {
            listen       8013;
            server_name  localhost;
            # Define the variable which will hold the targeted backend URL.
            set $target '';
            location / {
                # Lua header filter for setting the custom signature header
                body_filter_by_lua_block {
                    local signer = require "http_sig.sign_response"
                    signer:save_content_digest_into_cache(ngx.shared.my_cache)
                }

                # Use the rewrite_by_lua_block to change the $target variable dynamically.
                rewrite_by_lua_block {
                    local signer = require "http_sig.sign_response"
		    local proxy_target_alone = ngx.req.get_headers()["x-proxy-target"]
		    if proxy_target_alone then
			    ngx.var.target = proxy_target_alone
		    else
			local proxy_target = signer:get_cookie("x_proxy_target")
                    	if proxy_target then
                        	ngx.var.target = proxy_target
                    	else
                        	ngx.var.target = "example.com"
                    	end
		    end
                }
                # The actual proxying happens here.
                proxy_pass https://$target;
            }
    }

    # server {
    #     listen       80;
    #     server_name  localhost;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }

    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   html;
    #     }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     #location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     #}

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     #location ~ \.php$ {
    #     #    root           html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     #}

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     #location ~ /\.ht {
    #     #    deny  all;
    #     #}
    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

